/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package initial;

import static lib.DBConnection.*;

import javax.swing.*;
import java.awt.*;

import static lib.Time.*;


/**
 *
 * @author Hantao
 */
public class DailyTracker extends JPanel implements Runnable {
	private static final String stop = "Stop";
	private static final String start = "Start";
	private static final String defaultTime = "00:00:00";

	private Thread thread;
	private int stopwatchHourCounter = 0;
	private int stopwatchMinuteCounter = 0;
	private int stopwatchSecondCounter = 0;
	private int timerHourCounter = 0;
	private int timerMinuteCounter = 0;
	private int timerSecondCounter = 0;

	private String stopwatchTimeString = "";
	private String timerTimeString = "";
	private	boolean threadStarted = false;
	private	int state = 0;

	/**
	 * Creates new form DailyTracker
	 */
	public DailyTracker() {
		initComponents();
		thread = new Thread(this);
	}

	public void resetStopwatch(){
		stopwatchHourCounter = 0;
		stopwatchMinuteCounter = 0;
		stopwatchSecondCounter = 0;

		stopwatchTimeString = defaultTime;

		displayStopwatch();
	}

	public void resetTimer() {
		timerHourCounter = 0;
		timerMinuteCounter = 0;
		timerSecondCounter = 0;

		timerTimeString = defaultTime;

		displayTimer();
	}

	public void displayStopwatch(){
		stopwatchLabel.setText(stopwatchTimeString);
	}

	public void displayTimer() {
		timerLabel.setText(timerTimeString);
	}
	
	public void setStopwatchCounter(){
		stopwatchTimeString ="";
		if (stopwatchHourCounter <10) {
			stopwatchTimeString ="0"+ stopwatchHourCounter;
		}
		else {
			stopwatchTimeString =""+ stopwatchHourCounter;
		}

		if (stopwatchMinuteCounter <10) {
			stopwatchTimeString +=":0"+ stopwatchMinuteCounter;
		}
		else {
			stopwatchTimeString +=":"+ stopwatchMinuteCounter;
		}

		if (stopwatchSecondCounter <10) {
			stopwatchTimeString +=":0"+ stopwatchSecondCounter;
		}
		else {
			stopwatchTimeString +=":"+ stopwatchSecondCounter;
		}
	}

	public void setTimerCounter(){
		timerTimeString ="";
		if (timerHourCounter <10) {
			timerTimeString ="0"+ timerHourCounter;
		}
		else {
			timerTimeString =""+ timerHourCounter;
		}

		if (timerMinuteCounter <10) {
			timerTimeString +=":0"+ timerMinuteCounter;
		}
		else {
			timerTimeString +=":"+ timerMinuteCounter;
		}

		if (timerSecondCounter <10) {
			timerTimeString +=":0"+ timerSecondCounter;
		}
		else {
			timerTimeString +=":"+ timerSecondCounter;
		}
	}


	public void run() {
		int seconds = 1;
		while(true) {
			try {
				if(state == 0) {
					stopwatchSecondCounter += seconds;
					if (stopwatchSecondCounter > 59) {
						stopwatchSecondCounter = 0;
						stopwatchMinuteCounter += seconds;
					}
					if (stopwatchMinuteCounter > 59) {
						stopwatchMinuteCounter = 0;
						stopwatchHourCounter += seconds;
					}
					setStopwatchCounter();
					displayStopwatch();
				}
				else {
					if(timerSecondCounter > 0) {
						timerSecondCounter -= seconds;
					}
					else {
						if(timerMinuteCounter > 0){
							timerMinuteCounter -= seconds;
							timerSecondCounter = 60 - seconds;
						}
						else {
							if(timerHourCounter > 0) {
								timerHourCounter -= seconds;
								timerMinuteCounter = 60 - seconds;
								timerSecondCounter = 60 - seconds;
							}
							else {
								thread.suspend();
								timerStartButton.setText(start);
							}
						}
					}
					setTimerCounter();
					displayTimer();
				}
				Thread.sleep(1000);
			} catch (Exception e){

			}
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		jPanel1 = new javax.swing.JPanel();

		dateLabel = new javax.swing.JLabel();

		pushupFieldLabel = new javax.swing.JLabel();
		situpFieldLabel = new javax.swing.JLabel();
		distanceFieldLabel = new javax.swing.JLabel();

		pushupInputField = new javax.swing.JTextField();
		situpInputField = new javax.swing.JTextField();
		distanceInputField = new javax.swing.JTextField();

		recordPushButton = new javax.swing.JButton();
		recordSitButton = new javax.swing.JButton();
		recordDistanceButton = new javax.swing.JButton();

		maxPushupLabel = new javax.swing.JLabel();
		maxSitupLabel = new javax.swing.JLabel();
		maxDistanceLabel = new javax.swing.JLabel();

		pushupLabel = new javax.swing.JLabel();
		situpLabel = new javax.swing.JLabel();
		distanceLabel = new javax.swing.JLabel();

		stopwatchLabel = new javax.swing.JLabel();
		stopwatchStartButton = new javax.swing.JButton();
		stopwatchResetButton = new javax.swing.JButton();

		timerLabel = new javax.swing.JLabel();
		timerInputField = new javax.swing.JTextField();
		timerStartButton = new javax.swing.JButton();
		timerResetButton = new javax.swing.JButton();

		submitButton = new javax.swing.JButton();
		viewDatabaseButton = new javax.swing.JButton();

		stopwatchLabel.setFont(new java.awt.Font("Digital-7 Mono", Font.BOLD, 48)); // NOI18N
		stopwatchLabel.setText(defaultTime);

		stopwatchStartButton.setText(start);
		stopwatchStartButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				stopwatchStartActionPerformed(evt);
			}
		});

		stopwatchResetButton.setText("Reset");
		stopwatchResetButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				stopwatchResetActionPerformed(evt);
			}
		});

		timerStartButton.setText(start);
		timerStartButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				timerStartActionPerformed(evt);
			}
		});

		timerResetButton.setText("Reset");
		timerResetButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				timerResetActionPerformed(evt);
			}
		});

		timerInputField.setText(defaultTime);

		pushupFieldLabel.setText("Pushups");
		situpFieldLabel.setText("Situps");
		distanceFieldLabel.setText("Distance");

		pushupInputField.setText("0");
		situpInputField.setText("0");
		distanceInputField.setText("0");

		recordPushButton.setText("Record");
		recordPushButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				recordPushActionPerformed(evt);
			}
		});

		recordSitButton.setText("Record");
		recordSitButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				recordSitActionPerformed(evt);
			}
		});

		recordDistanceButton.setText("Record");
		recordDistanceButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				recordDistanceActionPerformed(evt);
			}
		});

		submitButton.setText("Submit Stats");
		submitButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				submitResultsActionPerformed(evt);
			}
		});

		viewDatabaseButton.setText("View Database");
		viewDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				viewDatabaseActionPerformed(evt);
			}
		});

		dateLabel.setText(getFormattedDate());

		maxPushupLabel.setText("Max Pushups");
		pushupLabel.setText("0");

		maxSitupLabel.setText("Max Situps");
		situpLabel.setText("0");

		maxDistanceLabel.setText("Max Distance");
		distanceLabel.setText("0");

		timerLabel.setFont(new java.awt.Font("Digital-7 Mono", Font.BOLD, 48)); // NOI18N
		timerLabel.setText(defaultTime);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
			jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(jPanel1Layout.createSequentialGroup()
				.addContainerGap()
				.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
					.addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
							.addComponent(situpFieldLabel)
							.addComponent(pushupFieldLabel)
							.addComponent(distanceFieldLabel))
						.addGap(60, 60, 60)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
							.addComponent(pushupInputField, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
							.addComponent(situpInputField)
							.addComponent(distanceInputField))
						.addGap(30, 30, 30)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
							.addComponent(recordPushButton)
							.addComponent(recordSitButton)
							.addComponent(recordDistanceButton))
						.addGap(30, 30, 30)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGap(150, 150, 150))
					.addGroup(jPanel1Layout.createSequentialGroup()
						.addGap(0, 0, Short.MAX_VALUE)
						.addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
					.addGroup(jPanel1Layout.createSequentialGroup()
							.addComponent(maxDistanceLabel)
							.addGap(18, 18, 18)
							.addComponent(distanceLabel))
					.addGroup(jPanel1Layout.createSequentialGroup()
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
							.addGroup(jPanel1Layout.createSequentialGroup()
								.addComponent(maxPushupLabel)
								.addGap(18, 18, 18)
								.addComponent(pushupLabel))
							.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
								.addComponent(stopwatchLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(jPanel1Layout.createSequentialGroup()
									.addComponent(stopwatchStartButton)
									.addGap(97, 97, 97)
									.addComponent(stopwatchResetButton))
								.addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
									.addGap(25, 25, 25)
									.addComponent(submitButton)
									.addGap(25, 25, 25)
									.addComponent(viewDatabaseButton))))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
							.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
								.addComponent(maxSitupLabel)
								.addGap(18, 18, 18)
								.addComponent(situpLabel)
								.addGap(195, 195, 195))
							.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
									.addComponent(timerStartButton)
									.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
									.addComponent(timerResetButton)
									.addGap(26, 26, 26))
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
									.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(timerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(timerInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
									.addContainerGap()))))))
		);
		jPanel1Layout.setVerticalGroup(
			jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(jPanel1Layout.createSequentialGroup()
				.addContainerGap()
				.addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addGap(30, 30, 30)
				.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
					.addComponent(pushupFieldLabel)
					.addComponent(pushupInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
					.addComponent(recordPushButton))
					.addGap(30, 30, 30)
				.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
					.addComponent(situpFieldLabel)
					.addComponent(situpInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
					.addComponent(recordSitButton))
					.addGap(30, 30, 30)
				.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
					.addComponent(distanceFieldLabel)
					.addComponent(distanceInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
					.addComponent(recordDistanceButton))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
				.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
					.addComponent(maxPushupLabel)
					.addComponent(pushupLabel)
					.addComponent(maxSitupLabel)
					.addComponent(situpLabel)
					.addComponent(maxDistanceLabel)
					.addComponent(distanceLabel))
				.addGap(27, 27, 27)
				.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
					.addComponent(stopwatchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
					.addComponent(timerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGap(18, 18, 18)
				.addComponent(timerInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addGap(15, 15, 15)
				.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
					.addComponent(stopwatchStartButton)
					.addComponent(stopwatchResetButton)
					.addComponent(timerStartButton)
					.addComponent(timerResetButton))
				.addGap(40, 40, 40)
				.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
					.addComponent(submitButton)
					.addComponent(viewDatabaseButton))
)
		);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		setLayout(layout);
		layout.setHorizontalGroup(
			layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(layout.createSequentialGroup()
				.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addGap(0, 79, Short.MAX_VALUE))
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(layout.createSequentialGroup()
				.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addGap(0, 0, Short.MAX_VALUE))
		);
	}// </editor-fold>

	private void recordPushActionPerformed(java.awt.event.ActionEvent evt) {
		int pushNum;
		try {
			pushNum = Integer.parseInt(pushupInputField.getText());
			pushupLabel.setText(Integer.toString(pushNum));
		} catch(Exception e1) {
			JOptionPane.showMessageDialog(null, "Please Enter a Valid Number");
		}
	}

	private void recordSitActionPerformed(java.awt.event.ActionEvent evt) {
		int sitNum;
		try {
			sitNum = Integer.parseInt(situpInputField.getText());
			situpLabel.setText(Integer.toString(sitNum));

		} catch(Exception e1) {
			JOptionPane.showMessageDialog(null, "Please Enter a Valid Number");
		}
	}

	private void recordDistanceActionPerformed(java.awt.event.ActionEvent evt) {
		int runNum;
		try {
			runNum = Integer.parseInt(distanceInputField.getText());
			distanceLabel.setText(Integer.toString(runNum));

		} catch(Exception e1) {
			JOptionPane.showMessageDialog(null, "Please Enter a Valid Number");
		}
	}

	private void stopwatchStartActionPerformed(java.awt.event.ActionEvent evt) {
		if (stopwatchStartButton.getText().equals(start)) {
			stopwatchStartButton.setText(stop);

			state = 0;
			stopwatchResetButton.setEnabled(false);
			timerStartButton.setEnabled(false);
			timerResetButton.setEnabled(false);

			if (!threadStarted) {
				threadStarted = true;
				thread.start();
			}
			else {
				thread.resume();
			}
		}
		else {
			stopwatchResetButton.setEnabled(true);
			timerStartButton.setEnabled(true);
			timerResetButton.setEnabled(true);

			stopwatchStartButton.setText(start);

			thread.suspend();
		}
	}

	private void stopwatchResetActionPerformed(java.awt.event.ActionEvent evt) {
		resetStopwatch();
//		thread.suspend();
		stopwatchStartButton.setText(start);
	}

	private void timerStartActionPerformed(java.awt.event.ActionEvent evt) {
		if (timerStartButton.getText().equals(start)) {
			timerStartButton.setText(stop);

			state = 1;
			timerResetButton.setEnabled(false);
			stopwatchStartButton.setEnabled(false);
			stopwatchResetButton.setEnabled(false);

			String[] timer = timerInputField.getText().split(":");

			timerHourCounter = Integer.parseInt(timer[0]);
			timerMinuteCounter = Integer.parseInt(timer[1]);
			timerSecondCounter = Integer.parseInt(timer[2]);
			displayTimer();

			if (!threadStarted) {
				threadStarted = true;
				thread.start();
			}
			else {
				thread.resume();
			}
		}
		else {
			timerResetButton.setEnabled(true);
			stopwatchStartButton.setEnabled(true);
			stopwatchResetButton.setEnabled(true);

			timerStartButton.setText(start);
			thread.suspend();
		}
	}

	private void timerResetActionPerformed(java.awt.event.ActionEvent evt) {
		resetTimer();
//		thread.suspend();
		timerStartButton.setText(start);
	}

	private void submitResultsActionPerformed(java.awt.event.ActionEvent evt) {
		String[] runTime = stopwatchLabel.getText().split(":");
		float time = (Float.parseFloat(runTime[0]) * 60) + (Float.parseFloat(runTime[1]) * 1) + (Float.parseFloat(runTime[2]) / 60);
		insert(getFormattedDate(),
				Integer.parseInt(pushupLabel.getText()),
				Integer.parseInt(situpLabel.getText()),
				Float.parseFloat(distanceLabel.getText()),
				time);
	}

	private void viewDatabaseActionPerformed(java.awt.event.ActionEvent evt) {
		selectAll();
	}

	// Variables declaration - do not modify
	private javax.swing.JPanel jPanel1;

	private javax.swing.JLabel dateLabel;

	private javax.swing.JLabel pushupFieldLabel;
	private javax.swing.JLabel situpFieldLabel;
	private javax.swing.JLabel distanceFieldLabel;

	private javax.swing.JTextField pushupInputField;
	private javax.swing.JTextField situpInputField;
	private javax.swing.JTextField distanceInputField;

	private javax.swing.JButton recordPushButton;
	private javax.swing.JButton recordSitButton;
	private javax.swing.JButton recordDistanceButton;

	private javax.swing.JLabel maxPushupLabel;
	private javax.swing.JLabel maxSitupLabel;
	private javax.swing.JLabel maxDistanceLabel;
	private javax.swing.JLabel pushupLabel;
	private javax.swing.JLabel situpLabel;
	private javax.swing.JLabel distanceLabel;

	private javax.swing.JLabel stopwatchLabel;
	private javax.swing.JLabel timerLabel;
	private javax.swing.JTextField timerInputField;

	private javax.swing.JButton stopwatchStartButton;
	private javax.swing.JButton stopwatchResetButton;
	private javax.swing.JButton timerStartButton;
	private javax.swing.JButton timerResetButton;

	private javax.swing.JButton submitButton;
	private javax.swing.JButton viewDatabaseButton;
	// End of variables declaration
}
